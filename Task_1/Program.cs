using System;
// Известно, что у четных чисел младший бит имеет значение 0. 
// Используя Visual Studio, создайть проект по шаблону ConsoleApplication. 
// Написать программу, которая будет выполнять проверку чисел на четность. 
// Предложить два варианта решения поставленной задачи.

namespace Task_1
{
    class Program
    {
        static void Main(string[] args)
        {
            #region Первый способ определения числа на четность 
            // Oбъявление переменной.
            int operandNumber;
            {
                // Ввод данных пользователем.     
                Console.WriteLine("Введите произвольное целочисленное число");

                //Инициализация переменной с помощью метода Convert.To с типа string в тип int.
                operandNumber = Convert.ToInt32(Console.ReadLine());
            }

            // Способ первый. Исрользуем побитовую коньюнкцию, для чего введенное число умножаем на 1. 
            // Суть проверки заключается в том, что если младший бит результата умножения равен 0, число четное.

            {
                // Для проверки на четность объявляем переменноую operandCheckNumber типа int и присваивается ей значение 1.
                int checkNumber = 1;
                int checkForParity;
                // Переменной checkForParity типа uint присваивается значение побитовой конъюнкции введенного числа 
                // и переменной operandCheckNumber типа uint, значение которой равно 1.
                checkForParity = (operandNumber & checkNumber);

                // Для определения результатов побитовой конъюнкции используем условный оператор (if-else).
                // Если в результате операции побитовой конъюнкции введенного числа и 1,
                // младший бит равен 0 то число четное.
                if (checkForParity == 0)
                {
                    Console.WriteLine($"В результате операции побитовой конъюнкции введенного числа и 1, младший бит  = {checkForParity}, число четное");
                }
                // Иначе младший бит равен 1 и число не четное.
                else
                {
                    Console.WriteLine($"В результате операции побитовой конъюнкции введенного числа и 1, младший бит  = {checkForParity}, число нечетное");
                }

                #endregion

            #region Второй способ определения числа на четность 

                // Способ второй. Деление введенного числа на 2.
                // Если при делении целочисленного числа на 2 остаток равен 0, число четное,
                // в противном случае - не четное.

                // Oбъявление переменной.

                bool checkForParity1;

                // Переменной checkForParity2 типа boll присваиваем конвертированое
                // с помощью метода Convert.ToBoolean значение вычисления деления
                // с получением остатка перемнной operandNumber2 на 2
                // и переменной operandCheckNumber типа uint, значение которой равно 1.
                checkForParity1 = Convert.ToBoolean((operandNumber) % 2);

                {
                    //Для вывода в консоль результатов используем оператор условного выбора (if-else).
                    // Если в результате операции получен результат False то чиcло четное.
                    if (checkForParity1)
                    {
                        Console.WriteLine($"В результате деления целочисленного числа на 2, число нечетное");
                    }
                    // Иначе результат True.
                    else
                    {
                        Console.WriteLine($"В результате деления целочисленного числа на 2, число четное");
                    }

                    #endregion

                    Console.ReadKey();
                }
            }
        }
    }
}
